--2.1 select
SELECT * from Employee;

SELECT * from Employee where lastname = 'King';

SELECT * from Employee where firstname = 'Andrew' AND reportsto IS null;

--2.2 order by
SELECT * FROM ALBUM ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY;

--2.3 INSERT INTO
INSERT INTO GENRE (GENREID, NAME) VALUES (26, 'House');
INSERT INTO GENRE (GENREID, NAME) VALUES (27, 'Garage');

INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (500000, 'Ian', 'Barney', 'Boss', TO_DATE('2018-2-18 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('3000-8-14 00:00:00','yyyy-mm-dd hh24:mi:ss'), '11120 Jasper Ave NW', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-9482', '+1 (780) 428-3457', 'andrew@chinookcorp.com');
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) VALUES (500100, 'Kyle', 'Naber', 'Scrub', TO_DATE('2018-2-18 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('3000-8-14 00:00:00','yyyy-mm-dd hh24:mi:ss'), '11120 Jasper Ave NW', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-9482', '+1 (780) 428-3457', 'andrew@chinookcorp.com');

INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (8888, 'Luís', 'Gonçalves', 'Embraer - Empresa Brasileira de Aeronáutica S.A.', 'Av. Brigadeiro Faria Lima, 2170', 'São José dos Campos', 'SP', 'Brazil', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'luisg@embraer.com.br', 3);
INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (9999, 'Luís', 'Gonçalves', 'Embraer - Empresa Brasileira de Aeronáutica S.A.', 'Av. Brigadeiro Faria Lima, 2170', 'São José dos Campos', 'SP', 'Brazil', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'luisg@embraer.com.br', 3);

--2.4 UPDATE
UPDATE Customer 
SET FirstName = 'Robert', LastName = 'Walter' 
WHERE FirstName = 'Aaron' AND LastName = 'Mitchell';

SELECT * FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

UPDATE Artist
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

SELECT * FROM ARTIST WHERE NAME = 'CCR';

--2.5 LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE 
WHERE HIREDATE BETWEEN TO_DATE('2003-6-1 00:00:00','yyyy-mm-dd hh24:mi:ss') AND TO_DATE('2004-3-1 00:00:00','yyyy-mm-dd hh24:mi:ss');

--2.7 DELETE
DELETE FROM INVOICELINE WHERE INVOICEID IN (SELECT INVOICEID FROM INVOICE WHERE (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter') = CUSTOMERID);
DELETE FROM INVOICE WHERE (SELECT CUSTOMERID FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter') = CUSTOMERID;
DELETE FROM CUSTOMER WHERE (FIRSTNAME = 'Robert' AND LASTNAME = 'Walter');

--3 FUNCTIONS
--3.1 SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION GET_TIME
  RETURN TIMESTAMP WITH TIME ZONE
IS
  TIME_VALUE TIMESTAMP WITH TIME ZONE;
BEGIN
  SELECT CURRENT_TIMESTAMP INTO TIME_VALUE FROM DUAL;
  RETURN TIME_VALUE;
END;
/
SELECT GET_TIME() FROM DUAL;

CREATE OR REPLACE FUNCTION GET_MEDIA_LENGTH(MEDIA_ID IN NUMBER)
  RETURN NUMBER
IS
  MEDIA_LENGTH NUMBER;
BEGIN
  SELECT LENGTH(NAME) INTO MEDIA_LENGTH FROM MEDIATYPE WHERE MEDIATYPEID = MEDIA_ID;
  RETURN MEDIA_LENGTH;
END;
/

SELECT GET_MEDIA_LENGTH(1) FROM DUAL;

--3.2 System Defined Aggregate Functions
CREATE OR REPLACE FUNCTION INVOICE_AVERAGE
  RETURN NUMBER
IS
  TOTAL_COUNT NUMBER;
  TOTAL_SUM NUMBER;
BEGIN
  SELECT SUM(TOTAL) INTO TOTAL_SUM FROM INVOICE;
  SELECT COUNT(INVOICEID) INTO TOTAL_COUNT FROM INVOICE;
  RETURN TOTAL_SUM/TOTAL_COUNT;
END;
/
SELECT INVOICE_AVERAGE() FROM DUAL;

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
  RETURN VARCHAR2
IS
  MAX_PRICE NUMBER;
  EXPENSIVE_TRACK VARCHAR2(100);
BEGIN
 SELECT MAX(UNITPRICE) INTO MAX_PRICE FROM TRACK;
 SELECT NAME INTO EXPENSIVE_TRACK FROM TRACK WHERE UNITPRICE = MAX_PRICE
 FETCH FIRST ROW ONLY;
 RETURN EXPENSIVE_TRACK;
END;
/
SELECT MOST_EXPENSIVE_TRACK() FROM DUAL;

--3.3 USER DEFINED FUNCTIONS

CREATE OR REPLACE FUNCTION AVG_PRICE
  RETURN NUMBER
IS
  TOTAL NUMBER;
  TOTAL_SUM NUMBER;
BEGIN
  SELECT COUNT(INVOICELINEID) INTO TOTAL FROM INVOICELINE;
  SELECT SUM(UNITPRICE) INTO TOTAL_SUM FROM INVOICELINE;
  RETURN TOTAL_SUM/TOTAL;
END;
/
SELECT AVG_PRICE() FROM DUAL;

--3.4 USER DEFINED TABLE VALUED FUNTIONS
CREATE OR REPLACE FUNCTION YOUNG_EMPS
RETURN SYS_REFCURSOR
IS
  YOUNG_BOYS SYS_REFCURSOR;
BEGIN
  OPEN YOUNG_BOYS FOR
  SELECT FIRSTNAME FROM EMPLOYEE WHERE BIRTHDATE > TO_DATE('1968-12-31 00:00:00','yyyy-mm-dd hh24:mi:ss');
  RETURN YOUNG_BOYS;
END;
/

SELECT YOUNG_EMPS() FROM DUAL;

--4

CREATE OR REPLACE PROCEDURE EMPLOYEE_NAMES(
NAMES OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN NAMES FOR
  SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/


EXECUTE EMPLOYEE_NAMES(SYS_REFCURSOR);

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(
  FIRST_NAME IN VARCHAR2, LAST_NAME IN VARCHAR2, EMP_ID IN NUMBER
)
AS
BEGIN
  UPDATE EMPLOYEE
  SET FIRSTNAME = FIRST_NAME, LASTNAME = LAST_NAME
  WHERE EMPLOYEEID = EMP_ID;
END;
/
EXECUTE UPDATE_EMPLOYEE('IAN', 'BARNEY', 1);

CREATE OR REPLACE PROCEDURE GET_MANAGER(
  EMP_ID IN NUMBER, MANAGER_CRS OUT SYS_REFCURSOR
)
AS
BEGIN
  OPEN MANAGER_CRS FOR
  SELECT FIRSTNAME FROM EMPLOYEE WHERE (SELECT REPORTSTO FROM EMPLOYEE WHERE EMPLOYEEID = EMP_ID) = EMPLOYEEID;
END;
/

--4.3

CREATE OR REPLACE PROCEDURE GET_NAME_COMPANY(CST_ID IN NUMBER, CST_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN CST_CURSOR FOR
  SELECT FIRSTNAME, COMPANY FROM CUSTOMER WHERE CST_ID = CUSTOMERID;
END;
/

--5
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(
      INVID IN NUMBER)
  AS
  BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = INVID;
    DELETE FROM INVOICE WHERE INVOICEID = INVID;
    COMMIT;
  END;
/

CREATE OR REPLACE PROCEDURE NEW_CUSTOMER(C_ID IN NUMBER, C_FN IN VARCHAR2, C_LN IN VARCHAR2)
  AS
  BEGIN
    INSERT INTO Customer (CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone, Fax, Email, SupportRepId) VALUES (C_ID, C_FN, C_LN, 'Embraer - Empresa Brasileira de Aeronáutica S.A.', 'Av. Brigadeiro Faria Lima, 2170', 'São José dos Campos', 'SP', 'Brazil', '12227-000', '+55 (12) 3923-5555', '+55 (12) 3923-5566', 'luisg@embraer.com.br', 3);
    COMMIT;
  END;
/
--6

CREATE OR REPLACE TRIGGER NEW_RECORD_TRIG
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN 
  DBMS_OUTPUT.put_line('Added Employee');
END;
/

CREATE OR REPLACE TRIGGER UPDATE_ALBUM_TRIG
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.put_line('Updated Album');
END;
/

CREATE OR REPLACE TRIGGER CUSTOMER_DELETE_TRIG
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.put_line('Deleted customer');
END;
/

--7 JOINS
SELECT FIRSTNAME, INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT NAME, TITLE
FROM ALBUM
RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

SELECT *
FROM ALBUM
CROSS JOIN ARTIST
ORDER BY ARTIST.NAME;

SELECT *
FROM EMPLOYEE E1
JOIN EMPLOYEE E2
ON E1.REPORTSTO = E2.EMPLOYEEID;

SELECT ART.NAME AS ARTIST, AL.TITLE AS "ALBUM TITLE", T.NAME AS SONG, IL.INVOICELINEID AS lINEID, I.INVOICEID, C.FIRSTNAME AS CUSTOMER,
E.FIRSTNAME AS EMPLOYEE, PLT.PLAYLISTID AS PLAYLISTID, PL.NAME AS PLAYLIST, G.NAME AS GENRE, M.NAME AS MEDIATYPE
FROM ALBUM AL
JOIN ARTIST ART ON AL.ARTISTID = ART.ARTISTID
JOIN TRACK T ON T.ALBUMID = AL.ALBUMID
JOIN INVOICELINE IL ON IL.TRACKID = T.TRACKID
JOIN INVOICE I ON I.INVOICEID = IL.INVOICEID
JOIN CUSTOMER C ON C.CUSTOMERID = I.CUSTOMERID
JOIN EMPLOYEE E ON E.EMPLOYEEID = C.SUPPORTREPID
JOIN PLAYLISTTRACK PLT ON PLT.TRACKID = T.TRACKID
JOIN PLAYLIST PL ON PL.PLAYLISTID = PLT.PLAYLISTID
JOIN GENRE G ON G.GENREID = T.GENREID
JOIN MEDIATYPE M ON M.MEDIATYPEID = T.MEDIATYPEID

ORDER BY ART.NAME;

commit;
--9 ADMINISTRATION
