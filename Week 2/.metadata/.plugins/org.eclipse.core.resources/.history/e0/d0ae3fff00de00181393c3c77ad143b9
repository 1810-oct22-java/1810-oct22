package com.revature.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.pojos.Book;
import com.revature.util.ConnectionFactory;

public class BookDao {

	List<Book> books = new ArrayList<Book>();
	
	try(Connection conn = ConnectionFactory.getInstance().getConnection()) {
		String query = "SELECT * FROM BN_Book ORDER BY title"; //no semicolon
		
		//STATEMENT INTERFACE - implementation exposed via connection
		Statement statement = conn.createStatement();
		
		//ResultSet Interface - represents the result set of a DB Query
		ResultSet rs = statement.executeQuery(query);
		
		/*
		 * Moves the cursor forward one row from its current position.A ResultSet cursor is initially 
		 * positioned before the first row; the first call to the method next makes the first row the 
		 * current row; the second call makes the second row the current row, and so on. 
		 * When a call to the next method returns false,the cursor is positioned after the last row. 
		 * Any invocation of a ResultSet method which requires a current row will result in a SQLException 
		 * being thrown.If the result set type is TYPE_FORWARD_ONLY, it is vendor specified whether their 
		 * JDBC driver implementation will return false or throw an SQLException on a subsequent call to next. 
		 * If an input stream is open for the current row, a call to the method next will implicitly close it. 
		 * A ResultSet object'swarning chain is cleared when a new row is read.

		 */
		while (rs.next()) {
			Book temp = new Book();
			temp.setId(rs.getInt(1));
			temp.setTitle(rs.getString(2));
			books.add(temp);
		}
		
	} catch (SQLException e) {
		e.printStackTrace();
	}
	
	return genres;
	
	
}
