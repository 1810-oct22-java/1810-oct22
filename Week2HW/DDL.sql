/* DDL Script for book store example
contains a genre, book, author table
*/

--CREATE TABLE [table name] ([column info]) [table level constraints];
CREATE TABLE BN_GENRE(
 
 GENRE_ID NUMBER(10)PRIMARY KEY,
 NAME VARCHAR2(36) NOT NULL UNIQUE
);

CREATE TABLE BN_AUTHOR(
 AUTHOR_ID NUMBER(10) PRIMARY KEY,
 FIRST_NAME VARCHAR2(50) NOT NULL,
 LAST_NAME VARCHAR2(50),
 BIO VARCHAR2(1000)
);

--uniquely identify rows
CREATE TABLE BN_BOOK(
 BOOK_ID NUMBER(10) PRIMARY KEY,
 ISBN VARCHAR2(10) UNIQUE NOT NULL,
 TITLE VARCHAR2(256) NOT NULL,
 PRICE NUMBER(6,2) NOT NULL,
 GENRE NUMBER(10) NOT NULL,
 AUTHOR NUMBER(10) NOT NULL,
 --CONSTRAINT FK_BOOK_GENRE -- not necessary to name constraints but you can
 FOREIGN KEY(GENRE) REFERENCES BN_GENRE(GENRE_ID),
 FOREIGN KEY(AUTHOR) REFERENCES BN_AUTHOR(AUTHOR_ID)
 
);


-------------SEQUENCES----------------
--A set of integers that are generate in order on demand; usually used for 
--autoincrementing pk values
CREATE SEQUENCE BN_BOOK_SEQ;

--what could be run to recreate this; autogenerated code; default vals in sequence creation
CREATE SEQUENCE  "OCT22_JAVA_DEMO"."BN_BOOK_SEQ"  
MINVALUE 1 
MAXVALUE 9999999999999999999999999999 
INCREMENT BY 1 
START WITH 1 
CACHE 20 
NOORDER  
NOCYCLE  
NOPARTITION ;

--ctrl+/ is comment
CREATE SEQUENCE BN_AUTHOR_SEQ
START WITH 5
INCREMENT BY 5;

DROP SEQUENCE BN_AUTHOR_SEQ;

CREATE SEQUENCE BN_GENRE_SEQ;

/* DUAL -- dummytable
a special one-row/one-column table present by default in oracle DB installations
used to keep consistent syntax for various commands that need not be run on a table
*/
--just an x
select * from dual;
select SYSDATE from dual;

/*TRIGGERS
a trigger is a special type of stored procedure that automatically executes
when an event occurs in the database server

DML triggers execute when a user tries to modify data through a DML event.
we will use them before each insert on a table to get the next value of our
sequence and assign it to the PK value.
*/

CREATE OR REPLACE TRIGGER BN_BOOK_TRIG --Declare and name trigger
BEFORE INSERT ON BN_BOOK --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    --SQL statement(s) to operate when event happens
    --incrementing book seq and assigning it to a new book_id (book's pk) value
    SELECT BN_BOOK_SEQ.NEXTVAL INTO :NEW.BOOK_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER BN_AUTHOR_TRIG --Declare and name trigger
BEFORE INSERT ON BN_AUTHOR --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    --SQL statement(s) to operate when event happens
    --incrementing book seq and assigning it to a new book_id (book's pk) value
    SELECT BN_AUTHOR_SEQ.NEXTVAL INTO :NEW.AUTHOR_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER BN_GENRE_TRIG --Declare and name trigger
BEFORE INSERT ON BN_GENRE --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    --SQL statement(s) to operate when event happens
    --incrementing book seq and assigning it to a new book_id (book's pk) value
    SELECT BN_GENRE_SEQ.NEXTVAL INTO :NEW.GENRE_ID FROM DUAL;
END;
/

------DML----------------
INSERT INTO BN_GENRE(NAME) VALUES('History');
commit;

SELECT * FROM BN_GENRE ORDER BY name;

INSERT INTO BN_AUTHOR(First_Name) VALUES('Mark');
commit;

INSERT INTO BN_BOOK(Title,ISBN,Price,Genre,Author) VALUES('The Book Thief','12A345',9.99,23,5);
commit;

SELECT * FROM BN_GENRE WHERE GENRE_ID = 22;

SELECT * FROM BN_BOOK;


