/* DDL Script for book store example
contains a genre, book, author table
*/

--CREATE TABLE [table name] ([column info]) [table level constraints];
CREATE TABLE BANK_USER(
 USER_ID NUMBER(10) PRIMARY KEY,
 FIRSTNAME VARCHAR2(50) NOT NULL,
 LASTNAME VARCHAR2(50) NOT NULL,
 EMAIL VARCHAR(50) NOT NULL UNIQUE,
 PW VARCHAR(50) NOT NULL
);

--uniquely identify rows
CREATE TABLE ACCOUNT_TYPE(
 ACC_TYPE_ID NUMBER(10) PRIMARY KEY,
 NAME VARCHAR2(10) UNIQUE NOT NULL
);

CREATE TABLE BANK_ACCOUNT(
 ACCOUNT_ID NUMBER(10) PRIMARY KEY,
 ACCOUNT_TYPE NUMBER(10) NOT NULL,
 USER_ID NUMBER(10) NOT NULL,
 BALANCE NUMBER(12,2),
 FOREIGN KEY(USER_ID) REFERENCES BANK_USER(USER_ID),
 FOREIGN KEY(ACCOUNT_TYPE) REFERENCES ACCOUNT_TYPE(ACC_TYPE_ID)
);


-------------SEQUENCES----------------
CREATE SEQUENCE USER_SEQ;
CREATE SEQUENCE ACCOUNT_SEQ;
CREATE SEQUENCE ACCOUNT_TYPE_SEQ;

------------TRIGGERS-------------------
CREATE OR REPLACE TRIGGER USER_TRIG --Declare and name trigger
BEFORE INSERT ON BANK_USER --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    SELECT USER_SEQ.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ACC_TRIG --Declare and name trigger
BEFORE INSERT ON BANK_ACCOUNT --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    SELECT ACCOUNT_SEQ.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ACC_TYPE_TRIG --Declare and name trigger
BEFORE INSERT ON ACCOUNT_TYPE --when will trigger execute
FOR EACH ROW -- necessary to change value in a table
BEGIN
    SELECT ACCOUNT_TYPE_SEQ.NEXTVAL INTO :NEW.ACC_TYPE_ID FROM DUAL;
END;
/

------DML----------------
INSERT INTO BANK_USER(FIRSTNAME,LASTNAME,EMAIL,PW) VALUES('Theodore','Airey','ted.airey4@gmail.com','password');
commit;

INSERT INTO ACCOUNT_TYPE(NAME) VALUES ('Credit');
commit;

INSERT INTO BANK_ACCOUNT(ACCOUNT_TYPE,USER_ID,BALANCE) VALUES(1,84,0);
commit;

SELECT * FROM BANK_USER ORDER BY USER_ID;
SELECT * FROM BANK_ACCOUNT ORDER BY USER_ID;
SELECT * FROM ACCOUNT_TYPE ORDER BY ACC_TYPE_ID;

TRUNCATE TABLE BANK_USER;
TRUNCATE TABLE BANK_ACCOUNT;
TRUNCATE TABLE ACCOUNT_TYPE;

DELETE FROM BANK_USER WHERE USER_ID = 83;
DELETE FROM BANK_ACCOUNT WHERE USER_ID = 84;

CREATE OR REPLACE PROCEDURE GET_ALL_USERS
(USER_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN 
OPEN USER_CURSOR FOR SELECT * FROM BANK_USER;
END;
/
