--FUNCTIONS
/*
- executable blocks of code that take in 0 or more parameters and must return  calue
- cannot perform full DML statements -only SQL
- typically used to perform some sort of mathematical "function" on data and return output
*/

SELECT * FROM INVOICELINE;
-- Ex. 1-- Find avg unit price from invoiceline table
CREATE OR REPLACE FUNCTION INV_LINE_PRICE_AVG -- create [or replace] function [functionName]
RETURN NUMBER --data type of returns value
IS --IS/AS --define variable to return
AVERAGE NUMBER(3,2);
BEGIN 
SELECT AVG(UNITPRICE) INTO AVERAGE FROM INVOICELINE;
RETURN AVERAGE;
END;
/

-- Ex 2. Find number of songs 
select count(trackid) from track where genreid = (
select genreid from genre where name = 'Rock');

-- select number of books by genre title
CREATE OR REPLACE FUNCTION NUM_BOOKS_BY_GENRE
(GTITLE IN VARCHAR2)
RETURN NUMBER
AS
TOTAL NUMBER;
BEGIN
SELECT COUNT(BOOK_ID) INTO TOTAL FROM BN_BOOK WHERE GENRE = (
SELECT GENRE_ID FROM BN_GENRE WHERE LOWER(NAME) = LOWER(GTITLE));
RETURN TOTAL;
END;
/

SELECT NUM_BOOKS_BY_GENRE("Fantasy") FROM DUAL;

SELECT COUNT(BOOK_ID) INTO TOTAL FROM BN_BOOK WHERE GENRE = (
SELECT GENRE_ID FROM BN_GENRE WHERE LOWER(NAME) = LOWER('FANTASY'));

--ARTIST WITH THE MOST SONGS


----------------STORED PROCEDURES

--Transactional Procedure
CREATE OR REPLACE PROCEDURE DELETE_INVOICE
(INVID IN NUMBER)
AS
BEGIN
 DELETE FROM INVOICELINE WHERE INVOICEID = INVID;
 DELETE FROM INVOICE WHERE INVOICEID = INVOID;
 COMMIT;
END;
/
EXECUTE DELETE_INVOICE(240);

SELECT * FROM INVOICE;
SELECT * FROM INVOICELINE WHERE INVOICEID =240;

--EXPLORING CURSORS;
CREATE OR REPLACE PROCEDURE SONGS_BY_ARTIST(
ARTIST_NAME IN VARCHAR2, SONG_LIST OUT SYS_REFCURSOR)
AS
BEGIN
OPEN SONG_LIST FOR
SELECT * FROM TRACK WHERE ALBUMID IN(
SELECT ALBUMID FROM ALBUM WHERE ARTISTID IN (
SELECT ARTISTID FROM ARTIST WHERE NAME = ARTIST_NAME));
END;
/


--------------------stored procedure to return all books
CREATE OR REPLACE PROCEDURE GET_ALL_BOOOKS;
(BOOK_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
OPEN BOOK_CURSOR FOR SELECT * FROM BN_BOOK;
END;
/


--testing get all books
DECLARE
  BOOK_CURS_SYS_REFCURSOR;
  B_ID NUMBER(10);
  B_ISBM VARCHAR2(10);
  B_AUTHOR NUMBER(10);
  B_TITLE VARCHAR2(100);
  B_PRICE NUMBER(6,2);
  B_GENRE NUMBER(10);
  BOOK_TITLE VARCHAR2(100);
  BEGIN
  GET_ALL_BOOKS(BOOKS_CURS);
  LOOP
    FETCH BOOKS_CURS INTO B_ID, B_ISBN, B_AUHTOR, B_TITLE,B_PRICE,B_GENRE;
    EXIT WHEN BOOKS_CURS%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(B_ID ||','||B_TITLE);
  END LOOP;
END;
/
  
