/*******************************************************************************
   Create database
********************************************************************************/

CREATE TABLE ERS_REIMBURSEMENT_STATUS(
REIMB_STATUS_ID NUMBER NOT NULL,
REIMB_STATUS VARCHAR2(10),
PRIMARY KEY (REIMB_STATUS_ID) 
);
CREATE TABLE ERS_REIMBURSEMENT_TYPE(
REIMB_TYPE_ID NUMBER,
REIMB_TYPE VARCHAR2(10),
PRIMARY KEY (REIMB_TYPE_ID)
);
CREATE TABLE ERS_USER_ROLES(
ERS_USER_ROLE_ID NUMBER,
USER_ROLE VARCHAR2(10),
PRIMARY KEY (ERS_USER_ROLE_ID)
);
CREATE TABLE ERS_USERS(
ERS_USERS_ID NUMBER,
ERS_USERNAME VARCHAR2(50) UNIQUE,
ERS_PASSWORD VARCHAR2(50),
USER_FIRST_NAME VARCHAR2(100),
USER_LAST_NAME VARCHAR2(100),
USER_EMAIL VARCHAR2(150) UNIQUE,
USER_ROLE_ID NUMBER,
PRIMARY KEY (ERS_USERS_ID),
FOREIGN KEY (USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID)
);
CREATE TABLE ERS_REIMBURSEMENT(
REIMB_ID NUMBER,
REIMB_AMOUNT NUMBER,
REIM_SUBMITTED TIMESTAMP,
REIMB_RESOLVED TIMESTAMP,
REIMB_DESCRIPTION VARCHAR2(250),
REIMB_RECEIPT BLOB,
REIMB_AUTHOR NUMBER,
REIMB_RESOLVER NUMBER,
REIMB_STATUS_ID NUMBER,
REIMB_TYPE_ID NUMBER,
PRIMARY KEY (REIMB_ID),
FOREIGN KEY (REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID),
FOREIGN KEY (REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID),
FOREIGN KEY (REIMB_STATUS_ID) REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),
FOREIGN KEY (REIMB_TYPE_ID) REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);


/*******************************************************************************
   Create Sequence
********************************************************************************/
CREATE SEQUENCE USERID_SEQ;
CREATE SEQUENCE REIMBURSEMENT_SEQ;

/*******************************************************************************
   Create Triggers
********************************************************************************/
CREATE OR REPLACE TRIGGER ADD_REIMBURSEMENT
BEFORE INSERT ON ERS_REIMBURSEMENT
FOR EACH ROW
BEGIN
SELECT REIMBURSEMENT_SEQ.NEXTVAL INTO :NEW.REIM_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER ADD_USER
BEFORE INSERT ON ERS_USERS
FOR EACH ROW
BEGIN
SELECT USERID_SEQ.NEXTVAL INTO :NEW.ERS_USER_ROLE_ID FROM DUAL;
END;
/

/*******************************************************************************
   Create Procedure
********************************************************************************/
CREATE OR REPLACE PROCEDURE GET_ALL_STATUS 
(STATUS_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
OPEN STATUS_CURSOR FOR SELECT * FROM ERS_REIMBURSEMENT_STATUS;
END;
/

/*******************************************************************************
   Create Populate ERS_REIMBURSEMENT_TYPE
********************************************************************************/

INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE) VALUES (1,'LODGING');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE) VALUES (2,'TRAVEL"');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE) VALUES (3,'FOOD');
INSERT INTO ERS_REIMBURSEMENT_TYPE (REIMB_TYPE_ID, REIMB_TYPE) VALUES (4,'OTHER');
COMMIT;


/*******************************************************************************
   Testing
********************************************************************************/

SELECT * FROM ERS_REIMBURSEMENT_STATUS;
SELECT * FROM ERS_REIMBURSEMENT_TYPE;
SELECT * FROM ERS_USER_ROLES;
SELECT * FROM ERS_USERS;
SELECT * FROM ERS_REIMBURSEMENT;
/*******************************************************************************
   Drop Tables
********************************************************************************/
DROP TABLE  ERS_REIMBURSEMENT_STATUS;
DROP TABLE ERS_REIMBURSEMENT_TYPE;
DROP TABLE ERS_USER_ROLES;
DROP TABLE ERS_USERS;
DROP TABLE ERS_REIMBURSEMENT;